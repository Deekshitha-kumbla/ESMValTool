*****************
Ocean Diagnostics
*****************

The Ocean Diagnostics package contains several diagnostics which produce
figures and statistical information of models of the Ocean. The datasets have
been preprocessed by ESMValTool, based on recipes in the recipes directory.
Most of the diagnostics produce two or less types of figure, and several
diagnostics are called by multiple recipes.

Each diagnostic script expects a metadata file, automatically generated by
ESMValTool, and one or more preprocessed dataset. These are passed to the
diagnostic by ESMValTool in  the settings.yml and metadata.yml files.

While it may be possible in the future for the Ocean Diagnostics toolkit
to figure out how to plot data by itself, the current version requires the
recipe to produce the correct preprocessed data for each diagnostic script.
ie: to produce a time series plot, the preprocessor must produce a time-
dimensional dataset.

While these tools were built to evaluate the ocean component models, they also
can be used to produce figures for other domains. However, there are some ocean
specific elements, such as the z-direction being positive and reversed, and
some of the map plots have the continents coloured in by default.


========================
Diagnostics
========================

Diagnostics are stored in the diag_scripts directory: ocean_.

.. _ocean: https://github.com/ESMValGroup/ESMValTool/tree/version2_development/esmvaltool/diag_scripts/ocean/: 

.. esmvaltool/diag_scripts/ocean

The following python modules are included in the ocean diagnostics package.
Each module is described in more detail both below and inside the module.

- diagnostic_maps.py
- diagnostic_maps_quad.py
- diagnostic_model_vs_obs.py
- diagnostic_omz.py
- diagnostic_profiles.py
- diagnostic_seaice.py
- diagnostic_timeseries.py
- diagnostic_tools.py
- diagnostic_transects.py
- ocean_diagnostic_READMEs.rst


diagnostic_maps.py
==================

This diagnostics produces a spatial map from a NetCDF. It requires the input
netCDF to have the following dimensions. Either:

- A two dimensional file: latitude, longitude.
- A three dimensional file: depth, latitude, longitude.

In the case of a 3D netCDF file, this diagnostic produces a map for EVERY layer.
For this reason, we recommend extracting a small number of specific layers in
the preprocessor, using the `extract_layer` preprocessor.

This script can not process netcdf's with multiple time steps. Please use the
`time_average` preprocessor to collapse the time dimension.

This diagnostic also includes the optional arguments, `threshold` and
`thresholds`.

- threshold: a single float.
- thresholds: a list of floats.

Only one of these arguments should be provided at a time. These two arguments
produce a second kind of diagnostic map plot: a contour map showing the spatial
distribution of the threshold value, for each dataset. Alternatively, if the
thresholds argument is used instead of threshold, the single-dataset contour
map shows the contours of all the values in the thresholds list.

If multiple datasets are provided, in addition to the single dataset contour,
a multi-dataset contour map is also produced for each value in the thresholds
list.

Some appropriate preprocessors for this diagnostic would be:

For a  Global 2D field:

  .. code-block:: yaml
    
      prep_map_1:
	time_average:


For a  regional 2D field:

  .. code-block:: yaml

	prep_map_2:
	    extract_region:
	      start_longitude: -80.
	      end_longitude: 30.
	      start_latitude: -80.
	      end_latitude: 80.
	    time_average:

For a  Global 3D field at the surface and 10m depth:

  .. code-block:: yaml

	prep_map_3:
	  custom_order: true
	  extract_levels:
	    levels: [0., 10.]
	    scheme: linear_horizontal_extrapolate_vertical
	  time_average:


For a multi-model comparison mean of 2D global fields including contour thresholds.

  .. code-block:: yaml

	prep_map_4:
	  custom_order: true
	  time_average:
	  regrid:
	    target_grid: 1x1
	    scheme: linear

And this also requires the threshold key in the diagnostic:

  .. code-block:: yaml
  
	diagnostic_map:
	  variables:
	    tos: # Temperature ocean surface
	      preprocessor: prep_map_4
	      field: TO2M
	  scripts:
	    Ocean_regrid_map:
	      script: ocean/diagnostic_maps.py
	      thresholds: [5, 10, 15, 20]

The following recipes use this script:

- recipe_OceanPhysics.yml
- recipe_OxygenMinimumZones.yml
- recipe_OceanBGC.yml


diagnostic_maps_quad.py
=======================

Diagnostic to produce an image showing four maps. Each of these four maps
show latitude vs longitude and the cube value is used as the colourscale.
The four plots are:

``
        model1              model 1 minus model2
        model2 minus obs    model1 minus obs
``        

These figurtes are also known as Model vs Model vs Obs plots.

This diagnostic assumes that the preprocessors do the bulk of the
hard work, and that the cubes received by this diagnostic (via the settings.yml
and metadata.yml files) have no time component, a small number of depth layers,
and a latitude and longitude coordinates.

An approproate preprocessor for a 2D field would be:

  .. code-block:: yaml
  
	prep_quad_map:
	    time_average:

and an example of an appropriate diagnostic section of the recipe would be:

  .. code-block:: yaml

	diag_map_1:
	  variables:
	    tos: # Temperature ocean surface
	      preprocessor: prep_quad_map
	      field: TO2Ms
	      mip: Omon
	  additional_datasets:
	#        filename: tos_ATSR_L3_ARC-v1.1.1_199701-201112.nc
	#        download from: https://datashare.is.ed.ac.uk/handle/10283/536
	    - {dataset: ATSR,  project: obs4mips,  level: L3,  version: ARC-v1.1.1,  start_year: 2001,  end_year: 2003, tier: 3}
	  scripts:
	    Global_Ocean_map: 
	      script: ocean/diagnostic_maps_quad.py
	      control_model: {dataset: HadGEM2-CC, project: CMIP5, mip: Omon, exp: historical, ensemble: r1i1p1}
	      exper_model: {dataset: HadGEM2-ES, project: CMIP5, mip: Omon, exp: historical, ensemble: r1i1p1}
	      observational_dataset: {dataset: ATSR, project: obs4mips,}

Note that the details about the control model, the experiment models
and the observational dataset are all provided in the script section of the
recipe.

The following recipes use this script:

- recipe_OceanQuadMap.yml


diagnostic_model_vs_obs.py
==========================

This diagnositc makes model vs observations maps and scatter plots.
The map plots shows four latitude vs longitude maps:
``
        model              obs
        model minus obs    model1 over obs
``
Note that this diagnostic assumes that the preprocessors do the bulk of the
hard work, and that the cube received by this diagnostic (via the settings.yml
and metadata.yml files) has no time component, a small number of depth layers,
and a latitude and longitude coordinates.

The scatter plots plot the matched model coordinate on the x axis, and the
observational dataset on the y coordinate, then performs a linear
regression of those data and plots the line of best fit on the plot.
The parameters of the fit are also shown on the figure.

An approproate preprocessor for a 3D+time field would be:

  .. code-block:: yaml
  
	preprocessors:
	  prep_map:
	    extract_levels:
	      levels:  [100., ]
	      scheme: linear_extrap
	    time_average:
	    regrid:
	      target_grid: 1x1
	      scheme: linear



diagnostic_profiles.py
======================

This diagnostic to produce images of the profile over time from a cube.

These plost show cube value (ie temperature) on the x-axis, and depth/height
on the y axis. The colour scale is the annual mean of the cube data.
Note that this diagnostic assumes that the preprocessors do the bulk of the
hard work, and that the cube received by this diagnostic (via the settings.yml
and metadata.yml files) has a time component, and depth component, but no
latitude or longitude coordinates.

An approproate preprocessor for a 3D+time field would be:

  .. code-block:: yaml

	preprocessors:
	  prep_profile:
	    extract_volume:
	      long1: 0.
	      long2:  20.
	      lat1:  -30.
	      lat2:  30.
	      z_min: 0.
	      z_max: 3000.
	    average_region:
	      coord1: longitude
	      coord2: latitude

This tool is part of the ocean diagnostic tools package in the ESMValTool.


The following recipes use this script:

- recipe_OceanPhysics.yml


diagnostic_timeseries.py
========================

Diagnostic to produce images of the time development of a metric from a cube.
These plost show time on the x-axis and cube value (ie temperature) on the
y-axis.

Two types of plots are produced: individual model timeseries plots and
multi model time series plots. The inidivual plots show the results from a
single cube, even if this cube is a mutli-model mean made by the `multimodel`
preproccessor.

The multi model time series plots show several models on the same axes, where
each model is represented by a different line colour. The line colours are
determined by the number of models, their alphabetical order and the `jet`
colourscale. Observational datasets and multimodel means are shown as black
lines.

This diagnostic assumes that the preprocessors do the bulk of the work,
and that the cube received by this diagnostic (via the settings.yml
and metadata.yml files) is time-dimensional cube. This means that the preprossed
netcdf has a time component, no depth component, and no latitude or longitude
coordinates.

Some approproate preprocessors would be :

For a  Global area-weighted average 2D field:

  .. code-block:: yaml

	average_area:
	  coord1: longitude
	  coord2: latitude

For a  Global  volume-weighted average 3D field:

  .. code-block:: yaml
  
	average_volume:
	  coord1: longitude
	  coord2: latitude
	  coordz: depth

For a  Global area-weighted surface of a 3D field:

  .. code-block:: yaml

	extract_levels:
	  levels: [0., ]
	  scheme: linear_horizontal_extrapolate_vertical
	average_area:
	  coord1: longitude
	  coord2: latitude


The following recipes use this script:

- recipe_OceanPhysics.yml
- recipe_OxygenMinimumZones.yml
- recipe_OceanBGC.yml


diagnostic_transects.py
=======================

LEE: CHECK THE BEHAVIOUR OF THE TRANSECTS AGAINST CONTOURS AND IRREGULAR GRIDS.

This diagnostic produces images of a transect, typically along a constant
latitude or longitude.

These plost show 2D plots with either latitude or longitude along the x-axis,
depth along the y-axis and and the cube value is used as the colour scale.


This diagnostic assumes that the preprocessors do the bulk of the hard work,
and that the cube received by this diagnostic (via the settings.yml and
metadata.yml files) has no time component, and one of the latitude or
longitude coordinates has been reduced to a single value.

An approproate preprocessor for a 3D+time field would be:

  .. code-block:: yaml

    time_average:
    extract_slice:
      latitude: [-50.,50.]
      longitude: 332.


The following recipes use this script:

- recipe_OceanPhysics.yml
- recipe_OxygenMinimumZones.yml


diagnostic_tools.py
===================

This module contains several python tools used by the ocean diagnostics tools.

These tools are:

- folder: produces a directory at the path provided and returns a string.
- get_input_files: loads a dictionary from the input files in the metadata.yml.
- bgc_units: converts to sensible units where appropriate (ie Celcius, mmol/m3)
- timecoord_to_float: Converts time series to decimal time ie: Midnight on Januaryy 1st 1970 is 1970.0
- add_legend_outside_right: a plotting tool, which adds a legend outside the axes.
- get_image_format: loads the image format, as defined in the global user config.yml.
- get_image_path: creates a path for an image output.
- make_cube_layer_dict: makes a dictionary for several layers of a cube.

We just show a simple description here, each individual function is more fully
documented in the diagnostic_tools.py module.



diagnostic_seaice.py
====================

LEE: YOU NEED TO CHANGE THE DESCRIPTION IN THE HEADER TO MATCH THIS TEXT.

This diagnostic is unique in this module, as it produces several different
kinds of images, including time series, maps, and contours. It is a good
example of a diagnostic where the preprocessor does very little work,
and the diagnostic does a lot of the hard work.

This was done purposely, firstly to demonstrate the flexibility of ESMValTool,
and secondly because Sea Ice is a unique field where several Metrics can be
calculated from the sea ice cover fraction.

The recipe Associated with with diagnositc is the recipe_SeaIceExtent.yml.
This recipe contains 4 preprocessors which all perform approximately the same
calculation. All four preprocessors extract a season:
- December, January and February (DJF)
- June, July and August (JJA)
and they also extract either the North or South hemisphere. The four
preprocessors are combinations of DJF or JJA and North or South hemisphere.

One of the four preprocessors is North Hemisphere Winter ice extent:

.. code-block:: yaml

	timeseries_NHW_ice_extent: # North Hemisphere Winter ice_extent
	  custom_order: true
	  extract_time: &time_anchor # declare time here.
	      start_year: 1960
	      start_month: 12
	      start_day: 1
	      end_year: 2005
	      end_month: 9
	      end_day: 31
	  extract_season:
	    season: DJF
	  extract_region:
	    start_longitude: -180.
	    end_longitude: 180.
	    start_latitude: 0.
	    end_latitude: 90.

Note that the default settings for ESMValTool assume that the year starts on the
first of January. This causes a problem for this preprocessor, as the first
DJF season would not include the first Month, December, and the final would not
include both January and February.  For this reason, we also add the
`extract_time` preproccessor.

This preprocessor group produces a 2D field with a time component, allowing
the diagnostic to investigate the time development of the sea ice extend.

The diagnostic section of the recipe should look like this:

.. code-block:: yaml

	diag_ice_NHW:
	  description: North Hemisphere Winter Sea Ice diagnostics
	  variables:
	    sic: # surface ice cover
	      preprocessor: timeseries_NHW_ice_extent
	      field: TO2M
	      mip: OImon
	  scripts:
	    Global_seaice_timeseries:
	      script: ocean/diagnostic_seaice.py
	      threshold: 15.

Note the the threshold here is 15%, which is the standard cut of for the
ice extent.

The sea ice diagnositc script produces three kinds of plots, using the
methods:

- `make_map_extent_plots`: extent maps plots of individual models using a Polar Stereographic project.
- `make_map_plots`: maps plots of individual models using a Polar Stereographic project.
- `make_ts_plots`: time series plots of individual models

There are no multi model comparisons included here (yet).

The following recipe use this module:

- recipe_SeaIceExtent.yml





Associated recipes
******************

The following recipes are known to use these diagnostics:

- recipe_OceanBGC.yml
- recipe_OxygenMinimumZones.yml
- recipe_OceanPhysics.yml
- recipe_OceanQuadMap.yml
- recipe_SeaIceExtent.yml

These recipes are stored in `esmvaltool/recipes` directory.



recipe_OceanPhysics.yml
=======================

This is an example recipe which shows several examples of how to
manipulate marine model data. All example calculations are performed using the
ocean temperature in a three dimensional field (thetao), or at the
surface (tos). This recipe demonstrates the use of a range of preprocessors
in a marine context, and also shows many of the standard model-only
diagnostics (no observational component is included.)




recipe_OceanBGC.yml
===================

This is an example recipe which shows a several simple examples of how to
manipulate marine biogeochemical model data.


recipe_OxygenMinimumZones.yml
=============================

This recipe produces an analysis of Marine oxygen. The diagnositcs are based on
figure 1 of the following work:
Cabré, A., Marinov, I., Bernardello, R., and Bianchi, D.: Oxygen minimum zones
in the tropical Pacific across CMIP5 models: mean state differences and climate
change trends, Biogeosciences, 12, 5429-5454,
https://doi.org/10.5194/bg-12-5429-2015, 2015.


recipe_OceanQuadMap.yml
=======================

This is an example recipe showing the diagnostic_maps_quad.py diagnostic
comparing two versions of the HadGEM2 model against ATSR sea surface temperature.


recipe_SeaIceExtent.yml
=======================



Associated Observational datasets
=================================

The following observations datasets are used by these recipes:

World Ocean ATLAS
-----------------
These data can be downloaded from:
https://www.nodc.noaa.gov/OC5/woa13/woa13data.html
(last access 10/25/2018)
Select the "All fields data links (1° grid)" netCDF file, which contain all
fields.

The following WOA datasets are used by the ocean diagnostics:
 - Dissolved Oxygen

These files need to be reformatted using the `reformat_obs_woa_o2.py` script
in the `reformat_scripts/obs/` directory.


.. This file is part of the ocean diagnostic toolkit, which is part of
.. the ESMValTool toolkit.
..
.. Author: Lee de Mora (PML)
..        ledm@pml.ac.uk
