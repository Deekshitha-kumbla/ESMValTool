# recipe_mlr_co2.yml
---
documentation:

  description: |
    Use MLR (Machine Learning Regression) models to predict future CO2 fluxes.

  authors:
    - schl_ma

  maintainer:
    - schl_ma

  projects:
    - crescendo


preprocessors:

  mask_sea: &mask_sea
    mask_landsea:
      mask_out: sea
    extract_region:
      start_latitude: -60.0
      end_latitude: 90.0
      start_longitude: 0.0
      end_longitude: 360.0

  time_average:
    <<: *mask_sea
    time_average: null

  regrid:
    <<: *mask_sea
    regrid:
      scheme: nearest
      target_grid: 1x1


diagnostics:

  diag_mlr_input_tas:
    variables:
      features: &variable_settings
        short_name: tas
        project: CMIP5
        mip: Amon
        field: T2Ms
        exp: historical
        ensemble: r1i1p1
        start_year: 1986
        end_year: 2005
        preprocessor: mask_sea
        var_type: feature
        additional_datasets:
          - {dataset: CanESM2}
          - {dataset: IPSL-CM5A-LR}
          # - {dataset: MIROC5}
          # - {dataset: MIROC-ESM}
          # - {dataset: MPI-ESM-LR}
          # - {dataset: NorESM1-M}
      prediction_input:
        <<: *variable_settings
        preprocessor: regrid
        var_type: prediction_input
        additional_datasets:
          - {dataset: ERA-Interim, project: OBS, type: reanaly, version: 1, tier: 3}
    scripts:
      mean: &mean
        script: mlr/single_var.py
        mean: ['time']
        tag: T-Glob_c
      trend: &trend
        script: mlr/single_var.py
        trend: year
        tag: T-Glob_t

  diag_mlr_input_nbp:
    variables:
      features:
        <<: *variable_settings
        short_name: nbp_grid
        mip: Lmon
        derive: true
      prediction_input:
        <<: *variable_settings
        short_name: nbp_grid
        mip: Lmon
        derive: true
        preprocessor: regrid
        var_type: prediction_input
        additional_datasets:
          - {dataset: JMA-TRANSCOM, project: OBS, type: reanaly, version: 1, tier: 3}
    scripts:
      mean:
        <<: *mean
        tag: NBP-Glob_c
      trend:
        <<: *trend
        tag: NBP-Glob_t

  diag_mlr:
    description: Perform MLR on input data.
    variables:
      label:
        <<: *variable_settings
        short_name: nbp_grid
        mip: Lmon
        exp: rcp45
        start_year: 2020
        end_year: 2040
        preprocessor: time_average
        var_type: label
        tag: NBP
        derive: true
    scripts:
      multiple_mlr_models:
        script: mlr/main_gpr.py
        ancestors: [
          'label',
          'diag_mlr_input_*/mean',
          'diag_mlr_input_*/trend',
        ]
        mlr_model: gbr
        use_coords_as_feature: ['latitude', 'longitude']
        metadata_preselection:
          select:
            project: CMIP5
          group: dataset
          # parameters:
          #   learning_rate: 0.05
          #   loss: ls
          #   max_depth: 4
          #   min_samples_split: 2
          #   n_estimators: 2000
          # grid_search_cv_param_grid:
          #   n_estimators: [10, 20]
          # grid_search_cv_kwargs:
          #   cv: loo
