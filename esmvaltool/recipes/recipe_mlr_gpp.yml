# recipe_mlr_gpp.yml
---
documentation:

  description: |
    Use MLR (Machine Learning Regression) models to predict future gross
    primary production (GPP).

  authors:
    - schl_ma

  maintainer:
    - schl_ma

  projects:
    - crescendo


DATASET_ANCHOR: &datasets
  - {dataset: bcc-csm1-1}
  - {dataset: bcc-csm1-1-m}
  - {dataset: BNU-ESM}
  - {dataset: CanESM2}
  - {dataset: CESM1-BGC}
  - {dataset: GFDL-ESM2G}
  - {dataset: GFDL-ESM2M}
  - {dataset: HadGEM2-CC}
  - {dataset: HadGEM2-ES}
  - {dataset: inmcm4}
  - {dataset: IPSL-CM5A-LR}
  - {dataset: IPSL-CM5A-MR}
  - {dataset: IPSL-CM5B-LR}
  - {dataset: MIROC-ESM}
  - {dataset: MIROC-ESM-CHEM}
  - {dataset: NorESM1-ME}


preprocessors:

  mask_sea: &mask_sea
    custom_order: true
    regrid:
      scheme: nearest
      target_grid: 2x2
    extract_region:
      start_latitude: -60.0
      end_latitude: 90.0
      start_longitude: 0.0
      end_longitude: 360.0
    mask_landsea:
      mask_out: sea
      always_use_ne_mask: true


diagnostics:

  diag_mlr_input_tas:
    variables:
      features: &variable_settings_features
        short_name: tas
        preprocessor: mask_sea
        project: CMIP5
        mip: Amon
        exp: historical
        ensemble: r1i1p1
        start_year: 1989
        end_year: 2005
        var_type: feature
        additional_datasets: *datasets
      prediction_input: &variable_settings_prediction_input
        <<: *variable_settings_features
        prediction_name: OBS
        var_type: prediction_input
        additional_datasets:
          - {dataset: CRU, project: OBS, type: reanaly, version: TS4.02, tier: 2}
    scripts:
      monthly_clim: &monthly_clim
        script: mlr/preprocess.py
        aggregate_by:
          month_number: mean
        tag: T
        convert_units_to: celsius

  diag_mlr_input_tas_trend:
    variables:
      features:
        <<: *variable_settings_features
      prediction_input:
        <<: *variable_settings_prediction_input
    scripts:
      monthly_trend: &monthly_trend
        script: mlr/preprocess.py
        aggregate_by:
          month_number: trend
        return_trend_stderr: true
        convert_units_to: celsius yr-1
        tag: T_trend

  diag_mlr_input_pr:
    variables:
      features:
        <<: *variable_settings_features
        short_name: pr
      prediction_input:
        <<: *variable_settings_prediction_input
        short_name: pr
        additional_datasets:
          - {dataset: CRU, project: OBS, type: reanaly, version: TS4.02, tier: 2}
    scripts:
      monthly_clim:
        <<: *monthly_clim
        tag: PR
        convert_units_to: kg m-2 day-1

  diag_mlr_input_pr_trend:
    variables:
      features:
        <<: *variable_settings_features
        short_name: pr
      prediction_input:
        <<: *variable_settings_prediction_input
        short_name: pr
        additional_datasets:
          - {dataset: CRU, project: OBS, type: reanaly, version: TS4.02, tier: 2}
    scripts:
      monthly_trend:
        <<: *monthly_trend
        tag: PR_trend
        convert_units_to: celsius yr-1

  diag_mlr_input_et:
    variables:
      features:
        <<: *variable_settings_features
        short_name: et
        mip: Lmon
        derive: true
      prediction_input:
        <<: *variable_settings_prediction_input
        short_name: et
        mip: Lmon
        derive: true
        additional_datasets:
          - {dataset: LandFlux-EVAL, project: OBS, type: reanaly, version: Oct13, tier: 3}
      prediction_input_error:
        <<: *variable_settings_prediction_input
        short_name: etStderr
        mip: Lmon
        var_type: prediction_input_error
        additional_datasets:
          - {dataset: LandFlux-EVAL, project: OBS, type: reanaly, version: Oct13, tier: 3}
    scripts:
      monthly_clim:
        <<: *monthly_clim
        tag: ET
        convert_units_to: mm day-1

  diag_mlr_input_et_trend:
    variables:
      features:
        <<: *variable_settings_features
        short_name: et
        mip: Lmon
        derive: true
      prediction_input:
        <<: *variable_settings_prediction_input
        short_name: et
        mip: Lmon
        derive: true
        additional_datasets:
          - {dataset: LandFlux-EVAL, project: OBS, type: reanaly, version: Oct13, tier: 3}
    scripts:
      monthly_trend:
        <<: *monthly_trend
        tag: ET_trend
        convert_units_to: mm day-1 yr-1

  diag_mlr_input_gpp:
    variables:
      features:
        <<: *variable_settings_features
        short_name: gpp_grid
        mip: Lmon
        derive: true
      label:
        <<: *variable_settings_features
        short_name: gpp_grid
        mip: Lmon
        exp: rcp85
        start_year: 2083
        end_year: 2099
        derive: true
        var_type: label
      prediction_input:
        <<: *variable_settings_prediction_input
        short_name: gpp_grid
        mip: Lmon
        derive: true
        additional_datasets:
          - {dataset: MTE, project: OBS, type: reanaly, version: May12, tier: 3}
      prediction_input_error:
        <<: *variable_settings_prediction_input
        short_name: gppStderr
        mip: Lmon
        var_type: prediction_input_error
        additional_datasets:
          - {dataset: MTE, project: OBS, type: reanaly, version: May12, tier: 3}
    scripts:
      monthly_clim:
        <<: *monthly_clim
        tag: GPP
        convert_units_to: t km-2 yr-1

  diag_mlr_input_gpp_trend:
    variables:
      features:
        <<: *variable_settings_features
        short_name: gpp_grid
        mip: Lmon
        derive: true
      prediction_input:
        <<: *variable_settings_prediction_input
        short_name: gpp_grid
        mip: Lmon
        derive: true
        additional_datasets:
          - {dataset: MTE, project: OBS, type: reanaly, version: May12, tier: 3}
    scripts:
      monthly_trend:
        <<: *monthly_trend
        tag: GPP_trend
        convert_units_to: t km-2 yr-2

  diag_mlr_input_lai:
    variables:
      features:
        <<: *variable_settings_features
        short_name: lai_grid
        mip: Lmon
        derive: true
      prediction_input:
        <<: *variable_settings_prediction_input
        short_name: lai_grid
        mip: Lmon
        derive: true
        additional_datasets:
          - {dataset: LAI3g, project: OBS, type: reanaly, version: 1_regridded, tier: 3}
    scripts:
      monthly_clim:
        <<: *monthly_clim
        tag: LAI
        convert_units_to: null

  diag_mlr_input_lai_trend:
    variables:
      features:
        <<: *variable_settings_features
        short_name: lai_grid
        mip: Lmon
        derive: true
      prediction_input:
        <<: *variable_settings_prediction_input
        short_name: lai_grid
        mip: Lmon
        derive: true
        additional_datasets:
          - {dataset: LAI3g, project: OBS, type: reanaly, version: 1_regridded, tier: 3}
    scripts:
      monthly_trend:
        <<: *monthly_trend
        tag: LAI_trend
        convert_units_to: yr-1

  diag_postprocess_mte:
    description: Calculate mean and errors of MTE dataset.
    variables:
      ref:
        <<: *variable_settings_prediction_input
        short_name: gpp_grid
        mip: Lmon
        derive: true
        additional_datasets:
          - {dataset: MTE, project: OBS, type: reanaly, version: May12, tier: 3}
      mean:
        <<: *variable_settings_prediction_input
        short_name: gpp_grid
        mip: Lmon
        derive: true
        var_type: prediction_output
        additional_datasets:
          - {dataset: MTE, project: OBS, type: reanaly, version: May12, tier: 3}
      error:
        <<: *variable_settings_prediction_input
        short_name: gppStderr
        mip: Lmon
        var_type: prediction_output_error
        additional_datasets:
          - {dataset: MTE, project: OBS, type: reanaly, version: May12, tier: 3}
    scripts:
      monthly_clim:
        <<: *monthly_clim
        tag: GPP
        convert_units_to: t km-2 yr-1
      postprocess: &postprocess
        script: mlr/postprocess.py
        ancestors: ['diag_postprocess_mte/monthly_clim']
        convert_units_to: Gt yr-1
        mean: ['month_number']
        sum: ['latitude', 'longitude']

  diag_postprocess_historical_gpp:
    description: Calculate mean and errors of historical CMIP5 GPP.
    variables:
      ref:
        <<: *variable_settings_prediction_input
        short_name: gpp_grid
        mip: Lmon
        derive: true
        additional_datasets:
          - {dataset: MTE, project: OBS, type: reanaly, version: May12, tier: 3}
      mean:
        <<: *variable_settings_features
        short_name: gpp_grid
        mip: Lmon
        derive: true
        var_type: label
    scripts:
      monthly_clim:
        <<: *monthly_clim
        tag: GPP
        convert_units_to: t km-2 yr-1
      mmm: &mmm
        script: mlr/main.py
        ancestors: ['diag_postprocess_historical_gpp/monthly_clim']
        mlr_model_name: MMM
        mlr_model_type: mmm
        prediction_name: OBS
      postprocess:
        <<: *postprocess
        ancestors: [
          'diag_postprocess_historical_gpp/monthly_clim',
          'diag_postprocess_historical_gpp/mmm',
        ]

  diag_gbrt_gpp:
    description: Use GBRT model to predict GPP.
    scripts:
      gbrt: &gbrt
        script: mlr/main.py
        ancestors: ['diag_mlr_input_*/monthly_*']
        categorical_features: ['longitude', 'month_number']
        coords_as_features: ['month_number', 'latitude', 'longitude']
        estimate_mlr_model_error: true
        # grid_search_cv_kwargs:
        #   cv: 5
        # grid_search_cv_param_grid:
        #   final__regressor__max_depth:
        #     [6, 8, 10, 12]
        #   final__regressor__n_estimators:
        #     [150, 200, 250, 300, 350]
        #   final__regressor__learning_rate:
        #     [0.05, 0.04, 0.03, 0.02, 0.01]
        fit_kwargs:
          final__regressor__early_stopping_rounds: 10
        group_datasets_by_attributes: ['dataset']
        imputation_strategy: constant
        mlr_model_type: gbr_xgboost
        mlr_model_name: GBRT
        n_jobs: 24
        parameters_final_regressor:
          learning_rate: 0.02
          max_depth: 10
          n_estimators: 250
          subsample: 0.5
        plot_units:
          't km-2 yr-1': 'tC km$^{-2}$ yr$^{-1}$'
      postprocess:
        <<: *postprocess
        ancestors: [
          'diag_gbrt_gpp/gbrt',
          'diag_mlr_input_gpp/monthly_clim',
        ]

  diag_gbrt_gpp_pseudo_reality:
    description: Validate GBRT model using pseudo-reality approach.
    scripts:
      gbrt: &gbrt_pr
        <<: *gbrt
        grid_search_cv_param_grid: false
        only_predict: true
        parameters_final_regressor:
          learning_rate: 0.02
          max_depth: 10
          n_estimators: 250
          subsample: 0.5
        pseudo_reality: ['dataset']
      postprocess:
        <<: *postprocess
        ancestors: [
          'diag_gbrt_gpp_pseudo_reality/gbrt',
          'diag_mlr_input_gpp/monthly_clim',
        ]

  diag_gbrt_single_pred_gpp_pseudo_reality:
    description: Validate GBRT model (with single predictor) using pseudo-reality approach.
    scripts:
      gbrt:
        <<: *gbrt_pr
        ancestors: ['diag_mlr_input_gpp/monthly_clim']
        coords_as_features: []
        mlr_model_name: GBRT (one feature)
      postprocess:
        <<: *postprocess
        ancestors: [
          'diag_gbrt_single_pred_gpp_pseudo_reality/gbrt',
          'diag_mlr_input_gpp/monthly_clim',
        ]

  diag_lasso_gpp_pseudo_reality:
    description: Validate Lasso model using pseudo-reality approach.
    scripts:
      lasso:
        script: mlr/main.py
        ancestors: ['diag_mlr_input_*/monthly_*']
        categorical_features: ['longitude', 'month_number']
        coords_as_features: ['month_number', 'latitude', 'longitude']
        group_datasets_by_attributes: ['dataset']
        mlr_model_type: lasso_cv
        mlr_model_name: Lasso
        n_jobs: 24
        only_predict: true
        parameters_final_regressor:
          cv: 5
          n_jobs: 24
        pseudo_reality: ['dataset']

  diag_mmm_gpp:
    description: Use simple multi-model mean to predict GPP.
    scripts:
      mmm:
        <<: *mmm
        ancestors: ['diag_mlr_input_gpp/monthly_clim']
      postprocess:
        <<: *postprocess
        ancestors: [
          'diag_mmm_gpp/mmm',
          'diag_mlr_input_gpp/monthly_clim',
        ]

  diag_mmm_gpp_pseudo_reality:
    description: Validate MMM model using pseudo-reality approach.
    scripts:
      mmm:
        <<: *mmm
        pseudo_reality: ['dataset']
      postprocess:
        <<: *postprocess
        ancestors: [
          'diag_mmm_gpp_pseudo_reality/mmm',
          'diag_mlr_input_gpp/monthly_clim',
        ]

  diag_plots:
    description: Create plots.
    scripts:
      plot:
        script: mlr/plot.py
        ancestors: [
          'diag_gbrt_gpp/gbrt',
          'diag_mlr_input_gpp/monthly_clim',
        ]
        abs_plot:
          plot_kwargs:
            cbar_label: 'GPP / tC km$^{-2}$ yr$^{-1}$'
            cbar_range: [0, 6000, 100]
        bias_plot:
          plot_kwargs:
            cbar_label: 'ΔGPP / tC km$^{-2}$ yr$^{-1}$'
            cbar_range: [-2500, 2500, 100]
        aliases:
          label: CMIP5
          feature: CMIP5
          prediction_output_GBRT: GBRT
          prediction_input: MTE
        ignore_var_types: [
          'prediction_input_error',
          'prediction_output_error',
          'prediction_output_misc',
        ]

  diag_evaluate_residuals:
    description: Evaluate residuals of different statistical models.
    scripts:
      evaluate_residuals:
        script: mlr/evaluate_residuals.py
        ancestors:
          [
            'diag_gbrt_gpp_pseudo_reality/gbrt',
            'diag_gbrt_single_pred_gpp_pseudo_reality/gbrt',
            'diag_lasso_gpp_pseudo_reality/lasso',
            'diag_mmm_gpp_pseudo_reality/mmm',
          ]
        box_plot:
          pyplot_kwargs:
            ylabel: 'GPP / tC km$^{-2}$ yr$^{-1}$'
